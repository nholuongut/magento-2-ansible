
    - name: AWS_ENV VARs
      raw: "export AWS_ACCESS_KEY_ID={{aws_cli_key.AWS_ACCESS_KEY_ID}} && export AWS_SECRET_ACCESS_KEY='{{aws_cli_key.AWS_SECRET_ACCESS_KEY}}' && export AWS_DEFAULT_REGION={{ region }}"

    - name: Find AmI Ubuntu
      ec2_ami_facts:
        owners: 099720109477
        region: "{{region}}"
        filters:
          name: "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180912*"
      register: ami_find

    - name: Debug AmI Ubuntu
      debug:
        var: ami_find

    - name: Subnet AWS list
      ec2_vpc_subnet_facts:
        region: "{{region}}"
      register: subnet

    - name:  Subnet AWS list
      debug:
        var: subnet

    - name: Group List AWS for VPC
      ec2_group_facts:
        region: "{{region}}"
        filters:
          vpc-id: "{{aws_vpc}}"
      register: groups

    - name: Debug Groups
      debug:
        var: groups

    - name: Create a Ansible security group
      ec2_group:
        name: "{{aws_security_group}}"
        description: Security Group for webserver Servers Zone 2
        region: "{{region}}"
        vpc_id: "{{aws_vpc}}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
            #EFS
          - proto: tcp
            from_port: 2049
            to_port: 2049
            cidr_ip: 0.0.0.0/0
            #TOdo: ADD redis PORT
          - proto: tcp
            from_port: 6379
            to_port: 6379
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
            #varnish
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
            #nginx second
          - proto: tcp
            from_port: 8888
            to_port: 8888
            cidr_ip: 0.0.0.0/0
            #phpfpm
          - proto: tcp
            from_port: 9000
            to_port: 9000
            cidr_ip: 0.0.0.0/0

          - proto: tcp
            from_port: 6081
            to_port: 6081
            cidr_ip: 0.0.0.0/0
                #phpfpm
          - proto: tcp
            from_port: 6082
            to_port: 6082
            cidr_ip: 0.0.0.0/0

        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: web_new_group

    - name: Debug New Group List
      debug:
        var: web_new_group


    - name: Provision a set of EC2 instances
      ec2:
        key_name: "{{ aws_key }}"
        # group: test
        instance_type: "{{instance_type}}"
        image: "{{ami_find.images[0].image_id}}"
        region: "{{region}}"
        group: "{{ aws_security_group }}"
        vpc_subnet_id: "{{aws_subnet}}"
        keypair: "{{aws_key}}"
        wait: true
        exact_count: 1
        ##ToDo: issue: https://github.com/ansible/ansible/issues/20347
        volumes:
          - device_name: /dev/sda1 #sda important and Works!
            device_type: gp2
            volume_size: 10
            delete_on_termination: true
        count_tag:
          Name: "{{ ec2_name }}"
        instance_tags:
          Name: "{{ ec2_name }}"
          Name2: test
          Ansible: ansible
          infrastructure: "{{infrastructure_name}}"
          version: "{{infrastructure_version}}"
      register: ec2



    - set_fact:
        ec2: "{{ec2.instances}}  + {{ec2.tagged_instances}}"

    - name: Debug merge EC2 created + and taged/existed 1
      debug:
         var: ec2

    - ec2_vol:
        region: "{{region}}"
        instance: "{{item.id}}"
        volume_size: 20
        device_name: /dev/sdf
        #ToDo:Issue needs delete volume after instance termination
        # standard (magnetic), gp2 (SSD), io1 (Provisioned IOPS), st1 (Throughput Optimized HDD), sc1 (Cold HDD). "Standard" is the old EBS default
        volume_type: gp2
      with_items: "{{ ec2 }}"
      ## Dont Attach if don't need
      when: false

    - name: Add the newly created host so that we can further contact it
      add_host:
        name: "{{ item.public_ip }}"
        groups: aws
        ec2_id: "{{ item.id }}"
        when: item.public_ip is defined
      with_items: "{{ ec2 }}"

    ## Not doing but good option point domain to new instance
    - route53:
        state: present
        zone: ???
        record: "{{ magento_domain }}"
        type: A
        ttl: 700
        value: "{{ ec2[0].public_ip }}"
        overwrite: yes
        wait: yes
      when: false

    - name: Write the new ec2 instance host key to known hosts
      shell: "ssh-keyscan -H {{ item.public_ip }} >> ~/.ssh/known_hosts"
      with_items: "{{ ec2 }}"

    - name: Wait for SSH to come up
      wait_for:
          host: "{{ item.public_ip }}"
          port: 22
          state: started
      with_items: "{{ ec2 }}"

    - name: Add tag to New Instance(s)
      ec2_tag:
          resource: "{{ item.id }}"
          region: "{{ region }}"
          state: "present"
          tags:
            Name2: test
            env: test
      with_items: "{{ ec2 }}"
      register: tags
      when:
        - ec2 is defined

    - name: Debug Tags New
      debug:
         var: tags