    - name: Install AMAZON CLI
      become: yes
      shell: pip install awscli --upgrade --user

    - name: key id {{ lookup("env", "AWS_ACCESS_KEY_ID") | trim }}
      shell: aws configure set aws_access_key_id "{{ lookup("env", "AWS_ACCESS_KEY_ID") | trim }}"
    - name: key secret {{ lookup("env", "AWS_SECRET_ACCESS_KEY" ) | trim }}
      shell: aws configure set aws_secret_access_key "{{ lookup("env", "AWS_SECRET_ACCESS_KEY" ) | trim }}"

    - name: AWS Version
      shell: aws --version
      register: version

    - name: Find AmI Ubuntu
      ec2_ami_facts:
        owners: 099720109477
        region: "{{region}}"
        filters:
          name: "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180912*"
      register: ami_find

    - name: Debug instance
      debug:
        var: ami_find

    - name: Subnet AWS list
      ec2_vpc_subnet_facts:
        region: "{{region}}"
      register: subnet

    - name:  Subnet AWS list
      debug:
        var: subnet

    - name: Group List AWS for VPC
      ec2_group_facts:
        region: "{{region}}"
        filters:
          vpc-id: "{{aws_vpc}}"
      register: groups

    - name: Debug Groups
      debug:
        var: groups

    - name: Create a Ansible security group
      ec2_group:
        name: {{aws_security_group}}
        description: Security Group for webserver Servers Zone 2
        region: "{{region}}"
        vpc_id: "{{aws_vpc}}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
            #EFS
          - proto: tcp
            from_port: 2049
            to_port: 2049
            cidr_ip: 0.0.0.0/0
            #TOdo: ADD redis PORT
          - proto: tcp
            from_port: 6379
            to_port: 6379
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: web_new_group

    - name: Debug New Group List
      debug:
        var: web_new_group

      # - name: "Create key {{aws_key}} pair using provided key_material"
      #  ec2_key:
      #  name: "{{aws_key}}"
      #  region: "{{region}}"
      # force: false

    - name: Provision a set of EC2 instances
      ec2:
        key_name: "{{ aws_key }}"
        # group: test
        instance_type: t2.medium
        image: "{{ami_find.images[0].image_id}}"
        region: "{{region}}"
        vpc_subnet_id: "{{aws_subnet}}"
        keypair: "{{aws_key}}"
        wait: true
        exact_count: 1
        count_tag:
          Name: "{{ ec2_name }}"
        instance_tags:
          Name: "{{ ec2_name }}"
          Name2: test
          Ansible: instance_tags
        volumes:
          - device_name: /dev/xvda
            volume_type: gp2
            volume_size: 120
            delete_on_termination: true
      register: ec2

    - set_fact:
        ec2: "{{ec2.instances}}  + {{ec2.tagged_instances}}"

    - name: Debug merge EC2 created + and taged/existed 1
      debug:
         var: ec2

    - name: Add the newly created host so that we can further contact it
      add_host:
        name: "{{ item.public_ip }}"
        groups: aws
        ec2_id: "{{ item.id }}"
        when: item.public_ip is defined
      with_items: "{{ ec2 }}"

    - name: Wait for SSH to come up
      wait_for:
          host: "{{ item.public_ip }}"
          port: 22
          state: started
      with_items: "{{ ec2 }}"

    - name: Add tag to New Instance(s)
      ec2_tag:
          resource: "{{ item.id }}"
          region: "{{region}}"
          state: "present"
          tags:
            Name2: test
            env: test
      with_items: "{{ ec2 }}"
      register: tags
      when:
        - ec2 is defined

    - name: Debug Tags New
      debug:
         var: tags